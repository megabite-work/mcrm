security:
  role_hierarchy:
    ROLE_STOCK_KEEPER: ROLE_USER
    ROLE_CASHIER: ROLE_USER
    ROLE_ACCOUNTANT: ROLE_USER
    ROLE_MANAGER: [ROLE_USER, ROLE_STOCK_KEEPER, ROLE_CASHIER, ROLE_ACCOUNTANT]
    ROLE_DIRECTOR: ROLE_MANAGER
    ROLE_ADMIN: ROLE_DIRECTOR
  password_hashers:
    Symfony\Component\Security\Core\User\PasswordAuthenticatedUserInterface: "auto"
  providers:
    app_user_provider:
      entity:
        class: App\Entity\User
        property: username
  firewalls:
    dev:
      pattern: ^/(_(profiler|wdt)|css|images|js)/
      security: false
    user_register:
      pattern: ^/api/users
      methods:
        - post
      security: false
    api:
      pattern: ^/api
      stateless: true
      provider: app_user_provider
      entry_point: jwt
      json_login:
        check_path: /api/auth/login
        success_handler: lexik_jwt_authentication.handler.authentication_success
        failure_handler: lexik_jwt_authentication.handler.authentication_failure
      jwt: ~
      refresh_jwt:
        check_path: /api/auth/refresh-token

  access_control:
    - { path: ^/api/auth/(login|refresh-token), roles: PUBLIC_ACCESS }
    - { path: ^/api/.+, roles: IS_AUTHENTICATED_FULLY }
    - { path: ^/api, roles: PUBLIC_ACCESS }

when@test:
  security:
    password_hashers:
      Symfony\Component\Security\Core\User\PasswordAuthenticatedUserInterface:
        algorithm: auto
        cost: 4 # Lowest possible value for bcrypt
        time_cost: 3 # Lowest possible value for argon
        memory_cost: 10 # Lowest possible value for argon
